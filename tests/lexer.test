# Test for Lexer routines
#
# Copyright (C) 2020 Lawrence Woodman <lwoodman@vlifesystems.com>
# Licensed under an MIT licence.  Please see LICENCE.md for details.

set ThisScriptDir [file dirname [info script]]
set LibDir [file join $ThisScriptDir .. lib]
set VendorDir [file join $ThisScriptDir .. vendor]
set FixturesDir [file join $ThisScriptDir fixtures]
source [file join $VendorDir xproc-0.1.tm]
source [file join $LibDir lexer.tcl]
source [file join $ThisScriptDir test_helpers.tcl]


# Tests normal lexer is correct
xproc::test -id 1 lex {{ns t} {
  set cases [list \
    [dict create filename "hi.asq" \
                 src {.include "hi"} \
                 result {{{directive .include 1} {string hi 1} {EOL {} 1}} {} {}}] \
    [dict create filename "bat.asq" \
                 src {.bat} \
                 result {{{directive .bat 1} {EOL {} 1}} {} {}}] \
    [dict create filename "ascii.asq" \
                 src {.ascii "hi\ndouble quotes: \"\nbye"} \
                 result [list [list {directive .ascii 1} \
                                    {string {hi\ndouble quotes: \"\nbye} 1} \
                                    {EOL {} 1}] \
                              {} {}]] \
    [dict create filename "word.asq" \
                 src {.word  3} \
                 result [list [list {directive .word 1} \
                                    {num 3 1} \
                                    {EOL {} 1}] \
                              {} {}]] \
    [dict create filename "word.asq" \
                 src {.word  3   ; this is a comment} \
                 result [list [list {directive .word 1} \
                                    {num 3 1} \
                                    {comment {this is a comment} 1} \
                                    {EOL {} 1}] \
                              {} {}]] \
    [dict create filename "word.asq" \
                 src {.word  t+3} \
                 result [list [list {directive .word 1} \
                                    {expr t+3 1} \
                                    {EOL {} 1}] \
                              {} {}]] \
    [dict create filename "word.asq" \
                 src {.word  3+t} \
                 result [list [list {directive .word 1} \
                                    {expr 3+t 1} \
                                    {EOL {} 1}] \
                              {} {}]] \
    [dict create filename "word.asq" \
                 src {.word  $} \
                 result [list [list {directive .word 1} \
                                    {id {$} 1} \
                                    {EOL {} 1}] \
                              {} {}]] \
    [dict create filename "word.asq" \
                 src {.word  1+$} \
                 result [list [list {directive .word 1} \
                                    {expr {1+$} 1} \
                                    {EOL {} 1}] \
                              {} {}]] \
    [dict create filename "word.asq" \
                 src {.word  $+1} \
                 result [list [list {directive .word 1} \
                                    {expr {$+1} 1} \
                                    {EOL {} 1}] \
                              {} {}]] \
    [dict create filename "add.asq" \
                 src {add #3 b} \
                 result [list [list {id add 1} \
                                    {literal #3 1} \
                                    {id b 1} \
                                    {EOL {} 1}] \
                              {{#3} {type literal val 3}} {}]] \
    [dict create filename "add.asq" \
                 src {add #2 b   ; this is a comment} \
                 result [list [list {id add 1} \
                                    {literal #2 1} \
                                    {id b 1} \
                                    {comment {this is a comment} 1} \
                                    {EOL {} 1}] \
                              {{#2} {type literal val 2}} {}]] \
    [dict create filename "add.asq" \
                 src {add #-2 #45} \
                 result [list [list {id add 1} \
                                    {literal #-2 1} \
                                    {literal #45 1} \
                                    {EOL {} 1}] \
                              [dict create {#-2} {type literal val -2} \
                                           #45 {type literal val 45}] {}]] \
  ]
  xproc::testCases $t $cases {{ns case} {
    dict with case {${ns}::lex $filename $src}
  }}
}}


# Tests errors are correct
xproc::test -id 2 lex {{ns t} {
  set cases [list \
    [dict create filename "include.asq" \
                 src {.include fred.inc} \
                 result [list {} {} \
                 [list [dict create filename "include.asq" \
                                    lineNum 1 line {.include fred.inc} \
                                    msg "Syntax error"]]]] \
    [dict create filename "include.asq" \
                 src {.include "hello".equ} \
                 result [list {} {} \
                 [list [dict create filename "include.asq" \
                                    lineNum 1 line {.include "hello".equ} \
                                    msg "Syntax error"]]]] \
    [dict create filename "ascii.asq" \
                 src {.ascii "hello""fred"} \
                 result [list {} {} \
                 [list [dict create filename "ascii.asq" \
                                    lineNum 1 line {.ascii "hello""fred"} \
                                    msg "Syntax error"]]]] \
    [dict create filename "hello.asq" \
                 src {"hello"} \
                 result [list {} {} \
                 [list [dict create filename "hello.asq" \
                                    lineNum 1 line {"hello"} \
                                    msg "Invalid position for string"]]]] \
    [dict create filename "hello.asq" \
                 src {hello+3} \
                 result [list {} {} \
                 [list [dict create filename "hello.asq" \
                                    lineNum 1 line {hello+3} \
                                    msg "Invalid position for expression"]]]] \
    [dict create filename "three.asq" \
                 src {3} \
                 result [list {} {} \
                 [list [dict create filename "three.asq" \
                                    lineNum 1 line {3} \
                                    msg "Invalid position for number"]]]] \
    [dict create filename "lthree.asq" \
                 src {#3} \
                 result [list {} {} \
                 [list [dict create filename "lthree.asq" \
                                    lineNum 1 line {#3} \
                                    msg "Invalid position for literal"]]]] \
    [dict create filename "word.asq" \
                 src {.word fred:} \
                 result [list {} {} \
                 [list [dict create filename "word.asq" \
                                    lineNum 1 line {.word fred:} \
                                    msg "Invalid position for label"]]]] \
    [dict create filename "fred.asq" \
                 src {fred::} \
                 result [list {} {} \
                 [list [dict create filename "fred.asq" \
                                             lineNum 1 line {fred::} \
                                             msg "Invalid label: fred::"]]]] \
    [dict create filename "fred.asq" \
                 src {hi:::fred:} \
                 result [list {} {} \
                 [list [dict create filename "fred.asq" \
                                    lineNum 1 line {hi:::fred:} \
                                    msg "Invalid label: hi:::fred:"]]]]
  ]
  xproc::testCases $t $cases {{ns case} {
    dict with case {${ns}::lex $filename $src}
  }}
}}
