# Test for Assembler routines
#
# Copyright (C) 2020 Lawrence Woodman <lwoodman@vlifesystems.com>
# Licensed under an MIT licence.  Please see LICENCE.md for details.

set ThisScriptDir [file dirname [info script]]
set LibDir [file join $ThisScriptDir .. lib]
set VendorDir [file join $ThisScriptDir .. vendor]
set FixturesDir [file join $ThisScriptDir fixtures]
source [file join $VendorDir xproc-0.1.tm]
source [file join $LibDir file.tcl]
source [file join $LibDir lexer.tcl]
source [file join $LibDir parser.tcl]
source [file join $LibDir asm.tcl]
source [file join $ThisScriptDir test_helpers.tcl]


# Tests normal assembler is correct
xproc::test -id 1 assemble {{ns t} {
  set startDir [pwd]
  # TODO: Add tests for listing
  # TODO: Support directory lookups for .include so don't need to
  # TODO: be in same directory
  set cases [list \
    [dict create \
      filename "helloworld.asq" \
      result [list 16 -1 3 15 0 6 15 10 9 31 16 -1 31 31 0 -1 \
                   72 69 76 76 79 44 32 87 79 82 76 68 33 10 0 0]] \
    [dict create \
      filename "adder.asq" \
      result [list 15 18 3 16 18 6 17 18 9 18 -1 12 18 18 -1 -1 -2 -3 48 ]] \
    [dict create \
      filename "adder_constants_maths.asq" \
      result [list 15 18 3 16 18 6 17 18 9 18 -1 12 18 18 -1 -1 -2 -3 48 ]] \
    [dict create \
      filename "call_ret_macros.asq" \
      result [list 13 13 14 0 12 12 7 3 12 10 13 13 0 0 3 3 17 23 3 20 \
                   13 13 4 24 13 13 -1]] \
    [dict create \
      filename "label_order.asq" \
      result [list 12 12 6 12 12 0 12 12 -1 12 12 0 0]] \
    [dict create \
      filename "sub_label_clash.asq" \
      result [list 9 9 3 12 12 -1 0 0 -1 5 3 3 0]] \
    [dict create \
      filename "include.asq" \
      result [list 3 3 4 0 3 3 7 27 25 10 25 3 13 3 \
                   26 16 3 3 19 26 26 22 3 3 -1 5 6 -1]] \
    [dict create \
      filename "ascii_asciiz.asq" \
      result [list 104 101 108 108 111 0 98 121 101]] \
    [dict create \
      filename "add_sub_literals.asq" \
      result [list 13 9 3 12 10 6 11 11 -1 5 6 0 -3 3]] \
    [dict create \
      filename "label_math.asq" \
      result [list 11 5 2 11 4 10 5 -2]] \
    [dict create \
      filename "constant_math.asq" \
      result [list 0 9 12 11]] \
  ]
  set caseNum 0
  foreach case $cases {
    dict with case {
      try {
        cd $::FixturesDir
        set src [TestHelpers::readFile $filename]
        lassign [${ns}::assemble $filename $src] gotResult gotListing gotErrors
        if {[llength $gotErrors] > 0} {
          xproc::fail $t "\[$caseNum\] got errors: $gotErrors"
        }
        if {$gotResult != $result} {
          xproc::fail $t "\[$caseNum\] got result: $gotResult, want: $result"
        }
      } on error {err} {
        xproc::fail $t "\[$caseNum\] err: $err"
      } finally {
        cd $startDir
      }
    }
    incr caseNum
  }
}}


# Tests errors are correct
xproc::test -id 2 assemble {{ns t} {
  set startDir [pwd]
  # TODO: Add test for $var not being substituted
  # TODO: Add tests for listing
  set cases [list \
    [dict create \
      filename "error_unknown_macro.asq" \
      errors [list \
        [dict create \
          filename "error_unknown_macro.asq" \
          lineNum 17 \
          line "inc2 addr" \
          msg "Unknown macro: inc2"] \
        [dict create \
          filename "error_unknown_macro.asq" \
          lineNum 18 \
          line "inc2 addr" \
          msg "Unknown macro: inc2"] \
        [dict create \
          filename "error_unknown_macro.asq" \
          lineNum 45 \
          line "dec num ; Testing unknown macro error" \
          msg "Unknown macro: dec"]]] \
    [dict create \
      filename "error_macro_noname.asq" \
      errors [list \
        [dict create \
          filename "error_macro_noname.asq" \
          lineNum 12 \
          line ".macro" \
          msg "Incomplete line"]]] \
    [dict create \
      filename "error_macro_name_exists.asq" \
      errors [list \
        [dict create \
          filename "error_macro_name_exists.asq" \
          lineNum 16 \
          line ".macro halt" \
          msg "Macro already exists: halt"]]] \
    [dict create \
      filename "error_macro_wrong_num_args.asq" \
      errors [list \
        [dict create \
          filename "error_macro_wrong_num_args.asq" \
          lineNum 32 \
          line "main: halt z" \
          msg "Wrong number of arguments"]]] \
    [dict create \
      filename "error_equ_name_clash.asq" \
      errors [list \
        [dict create \
          filename "error_equ_name_clash.asq" \
          lineNum 25 \
          line ".equ z 0" \
          msg "Symbol already exists: z"]]] \
    [dict create \
      filename "error_label_name_clash.asq" \
      errors [list \
        [dict create \
          filename "error_label_name_clash.asq" \
          lineNum 19 \
          line "z: .word 0" \
          msg "Symbol already exists: z"]]] \
    [dict create \
      filename "error_sble_wrong_num_args.asq" \
      errors [list \
        [dict create \
          filename "error_sble_wrong_num_args.asq" \
          lineNum 23 \
          line "main: sble z" \
          msg "Incomplete line"] \
        [dict create \
          filename "error_sble_wrong_num_args.asq" \
          lineNum 24 \
          line "sble" \
          msg "Incomplete line"] \
        [dict create \
          filename "error_sble_wrong_num_args.asq" \
          lineNum 25 \
          line "sble ; A comment" \
          msg "Incomplete line"] \
        [dict create \
          filename "error_sble_wrong_num_args.asq" \
          lineNum 26 \
          line "sble z ; A comment" \
          msg "Incomplete line"]]] \
    [dict create \
      filename "error_bad_strings.asq" \
      errors [list \
        [dict create \
          filename "error_bad_strings.asq" \
          lineNum 18 \
          line "hello:      .asciiz hello how are you\"" \
          msg "Syntax error"] \
        [dict create \
          filename "error_bad_strings.asq" \
          lineNum 19 \
          line "bye:        .ascii \"bye for now" \
          msg "Syntax error"]]] \
    [dict create \
      filename "error_ascii_missing_string.asq" \
      errors [list \
        [dict create \
          filename "error_ascii_missing_string.asq" \
          lineNum 18 \
          line "missing: .ascii" \
          msg "Incomplete line"]]] \
    [dict create \
      filename "error_asciiz_missing_string.asq" \
      errors [list \
        [dict create \
          filename "error_asciiz_missing_string.asq" \
          lineNum 18 \
          line "missing: .asciiz" \
          msg "Incomplete line"]]] \
    [dict create \
      filename "error_ascii_invalid_string.asq" \
      errors [list \
        [dict create \
          filename "error_ascii_invalid_string.asq" \
          lineNum 18 \
          line "hello: .ascii 5" \
          msg "Unexpected type"]]] \
    [dict create \
      filename "error_asciiz_invalid_string.asq" \
      errors [list \
        [dict create \
          filename "error_asciiz_invalid_string.asq" \
          lineNum 18 \
          line "hello: .asciiz 5" \
          msg "Unexpected type"]]] \
    [dict create \
      filename "error_unknown_label.asq" \
      errors [list \
        [dict create pos 0 msg "Unknown label: z"] \
        [dict create pos 1 msg "Unknown label: h+4"] \
        [dict create pos 3 msg "Unknown label: z"] \
        [dict create pos 4 msg "Unknown label: z"]]] \
    [dict create \
      filename "error_include_filename_not_found.asq" \
      errors [list \
        [dict create \
          filename "error_include_filename_not_found.asq" \
          lineNum 6 \
          line ".include \"missing.inc.asq\"" \
          msg "Can't include file: missing.inc.asq, couldn't open \"missing.inc.asq\": no such file or directory"] \
        [dict create \
          filename "error_include_filename_not_found.asq" \
          lineNum 12 \
          line "add a b" \
          msg "Unknown macro: add"]]] \
    [dict create \
      filename "error_include_filename_not_string.asq" \
      errors [list \
        [dict create \
          filename "error_include_filename_not_string.asq" \
          lineNum 6 \
          line ".include sub_standard" \
          msg "Unexpected type"] \
        [dict create \
          filename "error_include_filename_not_string.asq" \
          lineNum 12 \
          line "add a b" \
          msg "Unknown macro: add"]]] \
    [dict create \
      filename "error_unknown_directive.asq" \
      errors [list \
        [dict create \
          filename "error_unknown_directive.asq" \
          lineNum 7 \
          line ".bobble 3" \
          msg "Unknown directive: .bobble"]]] \
    [dict create \
      filename "error_include_file_with_errors.asq" \
      errors [list \
        [dict create \
          filename "sub_standard_no_add_macro.inc.asq" \
          lineNum 32 \
          line "add src dest" \
          msg "Unknown macro: add"] \
        [dict create \
          filename "error_include_file_with_errors.asq" \
          lineNum 14 \
          line "copy a b" \
          msg "Unknown macro: copy"]]] \
    [dict create \
      filename "error_error_line_formatting.asq" \
      errors [list \
        [dict create \
          filename "error_error_line_formatting.asq" \
          lineNum 7 \
          line "str: .bob \"this is a string\" ; some comment" \
          msg "Unknown directive: .bob"]]] \
  ]

  set caseNum 0
  foreach case $cases {
    dict with case {
      try {
        cd $::FixturesDir
        set src [TestHelpers::readFile $filename]
        lassign [${ns}::assemble $filename $src] gotResult gotListing gotErrors
        if {$gotErrors != $errors} {
          xproc::fail $t "\[$caseNum\] got errors: $gotErrors, want: $errors"
        }
      } finally {
        cd $startDir
      }
    }
    incr caseNum
  }
}}
