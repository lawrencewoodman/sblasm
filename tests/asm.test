set ThisScriptDir [file dirname [info script]]
set LibDir [file join $ThisScriptDir .. lib]
set VendorDir [file join $ThisScriptDir .. vendor]
set FixturesDir [file join $ThisScriptDir fixtures]
source [file join $VendorDir xproc-0.1.tm]
source [file join $LibDir file.tcl]
source [file join $LibDir asm.tcl]
source [file join $ThisScriptDir test_helpers.tcl]


# Tests normal assembler is correct
xproc::test -id 1 assemble {{ns t} {
  set startDir [pwd]
  # TODO: Add tests for listing
  # TODO: Support directory lookups for include so don't need to
  # TODO: be in same directory
  set cases [list \
    [dict create \
      filename "helloworld.asq" \
      result [list 16 -1 3 15 0 6 15 10 9 30 16 -1 30 30 0 -1 \
                   72 69 76 76 79 44 32 87 79 82 76 68 33 10 0]] \
    [dict create \
      filename "adder.asq" \
      result [list 15 18 3 16 18 6 17 18 9 18 -1 12 18 18 -1 -1 -2 -3 48 ]] \
    [dict create \
      filename "adder_constants_maths.asq" \
      result [list 15 18 3 16 18 6 17 18 9 18 -1 12 18 18 -1 -1 -2 -3 48 ]] \
    [dict create \
      filename "call_ret_macros.asq" \
      result [list 13 13 14 0 12 12 7 3 12 10 13 13 0 0 3 3 17 23 3 20 \
                   13 13 4 24 13 13 -1]] \
    [dict create \
      filename "label_order.asq" \
      result [list 12 12 6 12 12 0 12 12 -1 12 12 0 0]] \
    [dict create \
      filename "sub_label_clash.asq" \
      result [list 5 10 10 4 13 13 -1 0 0 -1 5 3 3 0]] \
    [dict create \
      filename "include.asq" \
      result [list 3 3 5 0 -1 17 3 8 3 18 11 3 3 14 3 3 -1 5 6]]

  ]
  foreach case $cases {
    dict with case {
      try {
        cd $::FixturesDir
        set src [TestHelpers::readFile $filename]
        lassign [${ns}::assemble $src] gotResult gotListing gotErrors
        if {[llength $gotErrors] > 0} {
          xproc::fail $t "got errors: $gotErrors"
        }
        if {$gotResult != $result} {
          xproc::fail $t "got result: $gotResult, want: $result"
        }
      } on error {err} {
        xproc::fail $t "err: $err"
      } finally {
        cd $startDir
      }
    }
  }
}}


# Tests errors are correct
xproc::test -id 2 assemble {{ns t} {
  # TODO: Add test for $var not being substituted
  # TODO: Add tests for listing
  set cases [list \
    [dict create \
      filename [file join $::FixturesDir "unknown_macro.asq"] \
      errors [dict create pass 1 errors [list \
        [dict create \
          lineNum 17 \
          line "            inc2 addr                ; Testing line numbers are correct" \
          msg "Unknown macro: inc2"] \
        [dict create \
          lineNum 18 \
          line "            inc2 addr                ; for unknown macro errors within macros" \
          msg "Unknown macro: inc2"] \
        [dict create \
          lineNum 45 \
          line "            dec   num                ; Testing unknown macro error" \
          msg "Unknown macro: dec"]]]] \
    [dict create \
      filename [file join $::FixturesDir "macro_noname.asq"] \
      errors [dict create pass 1 errors [list \
        [dict create \
          lineNum 12 \
          line ".macro" \
          msg "Macro name not supplied"]]]] \
    [dict create \
      filename [file join $::FixturesDir "macro_name_exists.asq"] \
      errors [dict create pass 1 errors [list \
        [dict create \
          lineNum 16 \
          line ".macro      halt" \
          msg "Macro already exists: halt"]]]] \
    [dict create \
      filename [file join $::FixturesDir "macro_wrong_num_args.asq"] \
      errors [dict create pass 1 errors [list \
        [dict create \
          lineNum 32 \
          line "main:       halt z" \
          msg "Wrong number of arguments"]]]] \
    [dict create \
      filename [file join $::FixturesDir "equ_name_clash.asq"] \
      errors [dict create pass 1 errors [list \
        [dict create \
          lineNum 25 \
          line ".equ        z    0" \
          msg "Name clash: z"]]]] \
    [dict create \
      filename [file join $::FixturesDir "label_name_clash.asq"] \
      errors [dict create pass 1 errors [list \
        [dict create \
          lineNum 19 \
          line "z:          .word 0" \
          msg "Name clash: z"]]]] \
    [dict create \
      filename [file join $::FixturesDir "sble_wrong_num_args.asq"] \
      errors [dict create pass 1 errors [list \
        [dict create \
          lineNum 23 \
          line "main:       sble z" \
          msg "Wrong number of arguments"] \
        [dict create \
          lineNum 24 \
          line "            sble" \
          msg "Wrong number of arguments"] \
        [dict create \
          lineNum 25 \
          line "            sble ; A comment" \
          msg "Wrong number of arguments"] \
        [dict create \
          lineNum 26 \
          line "            sble z ; A comment" \
          msg "Wrong number of arguments"]]]] \
    [dict create \
      filename [file join $::FixturesDir "bad_strings.asq"] \
      errors [dict create pass 1 errors [list \
        [dict create \
          lineNum 18 \
          line "hello:      .ascii hello how are you\"" \
          msg "String must begin with \""] \
        [dict create \
          lineNum 19 \
          line "bye:        .ascii \"bye for now" \
          msg "String must end with \""]]]] \
    [dict create \
      filename [file join $::FixturesDir "unknown_label.asq"] \
      errors [dict create pass 3 errors [list \
        [dict create pos 0 msg "Unknown label"] \
        [dict create pos 1 msg "Unknown label"]]]] \
    [dict create \
      filename [file join $::FixturesDir "error_include_filename_not_found.asq"] \
      errors [dict create pass 1 errors [list \
        [dict create \
          lineNum 6 \
          line ".include missing.inc.asq" \
          msg "Can't include file: missing.inc.asq, couldn't open \"missing.inc.asq\": no such file or directory"] \
        [dict create \
          lineNum 12 \
          line "            add   a b" \
          msg "Unknown macro: add"]]]]
  ]
  foreach case $cases {
    dict with case {
      set src [TestHelpers::readFile $filename]
      lassign [${ns}::assemble $src] gotResult gotListing gotErrors
      if {$gotErrors != $errors} {
        xproc::fail $t "got errors: $gotErrors, want: $errors"
      }
    }
  }
}}
