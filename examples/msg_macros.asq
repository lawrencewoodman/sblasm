;  Outputs messages using macros
;
; Copyright (C) 2020 Lawrence Woodman <lwoodman@vlifesystems.com>
; Licensed under a BSD 0-Clause licence. Please see 0BSD_LICENCE.md for details.

.equ        OUT -1
.equ        HALT -1

;========================================
;           Macro Definitions
;========================================
.macro      jump addr
            sble  z z addr
.endm

.macro      inc addr
            sble  minusOne addr
.endm


.macro      outputString stringAddr
.equ        OUT -1
            sble  loop loop
            sble  checkEnd+1 checkEnd+1
            sble  nAddr loop
            sble  nAddr checkEnd+1
loop:       sble  stringAddr OUT     ; Outputs char pointed to by hello
            inc   loop               ; Increments char output ptr to next char
            inc   checkEnd+1         ; Increments end of string ptr to next char
checkEnd:   sble  z stringAddr done  ; Finishes if char at ptr is zero
            jump  loop               ; Jumps to loop
z:          .word 0
nAddr:      .word 0-(stringAddr)
done:
.endm


; Call a function
; Store return address at first addr and begins execution at next address
.macro      call addr
            sble  addr addr
            sble  ret addr
jump:       sble  z z addr+1
ret:        .word $+1
.endm


; Return from a function
; Expects negative return address to be in retAddr
.macro      ret retAddr
            sble  retInst+2 retInst+2
            sble  retAddr retInst+2
retInst:
            sble  z z 0
.endm


;========================================
;           Start
;========================================
            sble  z z main

;========================================
;           Function Definitions
;========================================
helloWorld: .word 0                 ; Return address
            outputString  hello
            ret helloWorld


byeWorld:   .word 0                 ; Return address
            outputString  bye
            ret byeWorld


;========================================
;           Data Storage
;========================================
minusOne:   .word -1                 ; Used to increment ptr
hello:      .ascii "HELLO, WORLD!\n" ; Null-terminated string to print
z:          .word 0
bye:        .ascii "BYE, WORLD!\n"   ; Null-terminated string to print
            .word 0



;========================================
;           Main
;========================================
main:       call  helloWorld
            call  byeWorld
            call  helloWorld
            sble  z z HALT
